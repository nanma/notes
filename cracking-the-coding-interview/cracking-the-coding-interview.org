#+TITLE:     Cracking the Coding Interview
#+AUTHOR:    马楠（nxmanan#gmail.com）
#+EMAIL:     nxmanan#gmail.com
#+DATE:      2014-11-26
#+DESCRIPTION: Cracking the Coding Interview笔记
#+KEYWORDS: Algorithm
#+LANGUAGE: en
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: ^:{} #不对下划线_进行直接转义
#+INFOJS_OPT: view:nil toc: ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: no-export
#+HTML_LINK_HOME: http://manan.org
#+HTML_LINK_UP: ../index.html
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../style/emacs.css" />

* 资料
** 书
- 英文原版：Cracking the Coding Interview, 5th Edition
  1. 纸质版：http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X
- 中文版：《程序员面试金典》，第五版
  1. 纸质版/Kindle版：http://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00G8VOQOG
  2. 图灵PDF版：http://www.ituring.com.cn/book/1010
  3. 豆瓣：http://book.douban.com/subject/25753386/
** 网站
- http://www.crackingthecodinginterview.com/
- http://www.careercup.com/
这两个网站上提供了一些面试资料，可以浏览一下。

** 题解
- 官方（第4版，Java）：http://www.careercup.com/careercup_book_solutions
- 官方各种语言版（第5版，部分语言代码不全）：https://github.com/gaylemcd/ctci
- C++版(by Hawstein)：https://github.com/Hawstein/cracking-the-coding-interview

* 笔记
** I. The Interview Process
*** Timeline and Preparation Map
*** The Evaluation Process
1. prior experience
2. culture fit
3. coding skills
4. analytical ability
** II. Behind the Scenes
各公司面试要点。
** III. Special Situations
测试、PM等
** IV. Before the Interview
对学生和职业人士的建议。

利用业余时间开发个人项目：just for fun.

** V. Behavioral Questions
关于经历的各种问题，帮助了解你。

问题示例和解答技巧。
** VI. Technical Questions
*** Technical Preparation
**** How to practice a question
1. 独立完成，思考时空复杂度
2. 在纸上写出代码
3. 在纸上测试代码
4. 在计算机上输入代码并测试，记录出现的错误

**** What you need to know
- 数据结构
- 算法
- 概念

2的幂次表

*** Handling technical questions
解决问题的5步：
1. 询问面试官，消除歧义
2. 设计算法
3. 先写伪代码
4. 写代码
5. 测试代码，修改错误

*** Five algorithm approaches
Keep in mind that the more problems you practice, the easier it will be to identify which approach to use.

- Approach 1: Examplify 举例
- Approach 2: Pattern matching 寻找类似问题
- Approach 3: Simplify and Generalize 先简化再一般化
- Approach 4: Base case and build 递推
- Approach 5: Data structure brainstorm 数据结构头脑风暴

Note that the more problems you do, the more developed your instinct on which data structure to apply will be.You will also develop a more finely tuned instinct as to which of these approaches is the most useful.

*** What good coding looks like
Broadly speaking, good code has the following properties:
- correct
- efficient
- simple
- readable
- maintainable

**** Use Data Structures Generously 使用数据结构
**** Appropriate code reuse 代码复用
**** Modular 模块化
**** Flexible and robust 灵活性和鲁棒性
**** Error checking 错误检查

** VII. The offer and beyond
** [[./interview-questions.html][VIII. Interview Questions]]
