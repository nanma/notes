#+TITLE:     Lucene笔记
#+AUTHOR:    马楠（nxmanan#gmail.com）
#+EMAIL:     nxmanan#gmail.com
#+DATE:      2014-12-22
#+DESCRIPTION: 笔记
#+KEYWORDS: Algorithm
#+LANGUAGE: en
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: ^:{} #不对下划线_进行直接转义
#+INFOJS_OPT: view:info toc:t ltoc:t mouse:underline buttons:0 path:../style/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: no-export
#+HTML_LINK_HOME: http://manan.org
#+HTML_LINK_UP: http://manan.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../style/emacs.css" />

* CLucene代码结构
#+attr_html: :width 500px
[[./chart/clucene.png]]

core目录示意图：
#+attr_html: :height 350px
[[./chart/core.svg]]

* Lucene索引过程
** 索引过程
#+attr_html: :width 500px
[[./chart/index.svg]]

索引代码示意图：

#+attr_html: :width 550px
[[./chart/index-code.svg]]

索引过程：
1. 抽取本文，生成document
2. 分析Analysis
   - 源tokens经过一系列filter的修改，构成了analyzer
   - 分析过程生成了将写入索引的index流
3. 生成倒排索引

代码调用过程：
#+attr_html: :width 400px
[[./chart/index-call.svg]]

#+attr_html: :width 500px
[[./chart/process-field.svg]]

** 索引文件结构

每份Lucene索引由多个段（segment）组成，如下图所示：
#+attr_html: :width 250px
[[./chart/segment.svg]]

每个段是一份独立的索引，保存所有被索引文档的一个子集。当writer 刷新缓存的新写入文档和待删除文档时，生成新的段。在检索时，每个段被单独检索，所有的结果被合并返回。

每个段由多个文件组成，文件名形式为：_X.<ext>，其中X是段的名字，ext是扩展名。不同的扩展名代表索引段的不同部分。如果使用复合文件格式（compound, IndexWriter.setUseCompoundFile），则段内的大部分文件将合为一个文件，_X.cfs。这将减少检索时打开的文件描述符个数。

有一个特殊的段文件，segments_<N>，它引用所有的段。这个文件非常重要，Lucene每次首先打开它然后再打开它引用的其他段文件。值<N>称作『generation』，每次有变化提交到索引中时递增1。

随着时间增加，段的数量将不断增加。IndexWriter会周期性的选择段进行合并，并删除旧的段。

** 基本索引操作
1. 添加文档到索引
   - addDocument(Document)
   - addDocument(Document, Analyzer)
2. 删除文档
   - deleteDocuments(Term)
   - deleteDocuments(Term[])
   - deleteDocuments(Query)
   - deleteDocuments(Query[])
   - deleteDocuments(Query[])
   - deleteAll()
3. 更新文档
   - updateDocument(Term, Document)
   - updateDocument(Term, Document, Analyzer)
更新文档实际上先删除包含Term的文档，然后再写入新的文档。不能在原有文档上更新。

** 域选项 Field options
*** 索引选项indexing
索引选项控制域中的文本在倒排索引中索引方式。
- Index.ANALYZED
  使用analyzer将域中的文本分成分开的词，使得每个词可以被检索
- Index.NOT_ANALYZED
  索引该域，但不分析，将所有内容作为整体进行索引
- Index.ANALYZED_NO_NORMS
  Index.ANALYZED的变种，但是不在索引中存储归一化信息。归一化保存了索引时的加权信息，但是检索时会消耗更多内存。（LIA 2.5.3）
- Index.NOT_ANALYZED_NO_NORMS
  同上
- Index.NO
  该域的内容不可搜索
*** 存储选项storing
- Store.YES
  存储域，原始内容将保存在索引中，可以由IndexReader读取。适用于需要在检索结果中展示的内容，比如域名、标题等。
- Store.NO
  不存储域内容
*** 词向量选项 Term vectors
词向量是域中词项组成的向量。可以用于高亮文本，查找相似文档等。
- TermVector.YES
  存储每个文档出现过的词项和出现次数，不保存位置和偏移信息
- TermVector.WITH_POSITIONS
  存储每个文档出现过的词项，出现次数，和每个词出现的位置
- TermVector.WITH_OFFSETS
  存储每个文档出现过的词项，出现次数，和每个词出现时的偏移信息（开始和结束字符的位置）。

  偏移和位置有什么区别？
- TermVector.WITH_POSITIONS_OFFSETS
  存储每个文档出现过的词项，出现次数，位置和偏移信息
- TermVector.NO
  不保存词向量

只有Index.YES时才能设置TermVector.YES。

** 为文档和域加权 boosting
可以对文档和域进行加权，分为索引时和检索时加权。
*** 文档加权
#+BEGIN_SRC
doc.setBoost(1.5F)
#+END_SRC
*** 域加权
#+BEGIN_SRC
Field.setBoost(1.2F);
#+END_SRC
*** Norms
在索引时，文档每个域的所有加权会合并成一个float数字。每个域的所有加权会被编码成一个字节，在检索时被检索的域的norms会加载到内容中，解码成单精度数，在计算相关度时使用。


* 类
** document
*** Field
域Field是文档Document的一节，每个Field包含两部分，名称name和值value。域可以是以String或Reader方式提供的文本，或是原子化的关键词。这些关键词可以表示日期，url等。Field可以保存在索引index中，这样它们有可能在查询时被命中。

[[./chart/field.svg]]

**** Enum说明
- Store
  - STORE_YES：存储原始内容，不解析
  - SOTRE_NO：不存储内容
  - STORE_COMPRESS=4：以压缩后的形式存储域的内容，特别适用于长文档和值为二进制的域
- Index
  - INDEX_NO=16：不索引该域，不能搜索，但如果STORE_YES仍可以获得该域内容
  - INDEX_TOKENIZED=32：使用analyzer分析该域，并索引
  - INDEX_UNTOKENIZED=64：不使用analyzer，并索引，适合查询唯一的Id如产品编号
  - INDEX_NONORMS=128：索引，但不使用analyzer，并且不存储归一因子（norm）。
    - 没有norm意味着不进行索引时提权和域长度归一化
	- 优点是内存占用更小，因为对索引中文档的每个索引域需要一个字节来存储norm
	- 如果开始建立索引时存储了norm，那么以后禁止norm将无效；也就是说如果要NO_NORMS生效，这个域的所有实例必须在最开始就使用NO_NORMS
- TermVevtor
  - TERMVECTOR_NO=256：不存储词向量
  - TERMVECTOR_YES=512,
    - 存储每个文档的词向量（term vectors）。词向量是一个列表，存储文档的词项和词项在该文档中的出现次数
  - TERMVECTOR_WITH_POSITIONS = TERMVECTOR_YES | 1024
	- 存储词向量和每个token的位置信息
  - TERMVECTOR_WITH_OFFSETS = TERMVECTOR_YES | 2048
	- 存储词向量和token的偏置（offset）信息
  - TERMVECTOR_WITH_POSITIONS_OFFSETS = TERMVECTOR_WITH_OFFSETS | TERMVECTOR_WITH_POSITIONS
	- 存储词向量+token位置+token偏置信息


**** FieldSelector
FieldSelector用于决定用IndexReader加载document时，文档的哪些field被加载。

[[./chart/field-selector.svg]]

*** Document

文档Document是索引和检索的基本单元。一个Document由一组域构成。

[[./chart/document.svg]]

*** Tools

[[./chart/tools.svg]]

** analysis
Token类图：

[[./chart/token.svg]]

[[./chart/token-filter.svg]]

Analyzer类图：

[[./chart/analyzer.svg]]
** index
*** IndexWriter
[[./chart/index-writer.svg]]

** store
*** Directory

[[./chart/directory.svg]]

*** IndexOutput/IndexInput

[[./chart/store.svg]]
