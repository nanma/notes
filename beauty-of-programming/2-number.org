#+TITLE:     第2章 数字之魅
#+AUTHOR:    马楠（nxmanan#gmail.com）
#+EMAIL:     nxmanan#gmail.com
#+DATE:      2014-11-15
#+DESCRIPTION: 编程之美笔记
#+KEYWORDS: Algorithm
#+LANGUAGE: en
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: ^:{} #不对下划线_进行直接转义
#+INFOJS_OPT: view:nil toc: ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: no-export
#+HTML_LINK_HOME: http://manan.org
#+HTML_LINK_UP: ./index.html
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../style/emacs.css" />

* 2.1 求二进制数中的位数
1. 求模或位操作
2. v &= (v - 1)，每次消掉最低位的1
   - 同样可以用来计算一个数是否为2的方幂
3. 查表：预先计算出结果存在数组中，直接查

* 2.2 不要被阶乘吓到
问题：
1. 阶乘N!的末尾有多少个0？
   - 求因子5的个数
2. 阶乘N!的二进制中最低位1的位置？
   - 求因子2的个数

* 2.3 寻找发贴水王
1. 如果已排序：中间的ID是数量超过一半的ID
2. 遍历一遍，更新当前记录的ID和次数

计算机科学的普遍思想：将一个问题转化为规模较小的若干个问题，如分治，递推，贪心。在转化过程中，小的问题跟原文题基本一致。

* 2.5 寻找最大的K个数
1. 部分排序 *？？？*
2. 快速排序思想：划分
3. 找第K大的数，然后得到比它大的数
4. 最小堆（假如K比较大，放不进内存）
5. 计数排序思想：记录每个整数出现的次数，取最大的K个
1-3反复练习。
* 2.7 最大公约数
1. 辗转相除法
   - 大整数取模开销大
2. 取模换为减法
   - 迭代次数多
3. 根据奇偶性，进行除以2的操作，用位操作

* 2.9 Fibonacci数列
1. 递归
2. 存储已经计算的结果
3. 用矩阵算出递推公式，快速求出矩阵的幂
* 2.10 寻找数组中的最大值和最小值
1.5N：遍历一遍，同时找
* 2.12 快速找到满足条件的两个数
1. 先排序，然后找——O(nlogn);
2. 使用hash存储所有数字，实现快速查找——时间O(n)，空间O(n);
3. 先排序，然后头和尾相加，逐渐向中间靠拢——O(nlogn)。
* 2.13 子数组的最大乘积
1. 空间换时间:遍历数组,求出前i个元素和后i个元素的乘积并记录,然后直接求值；
2. 根据数组中的正负号和0的个数,份情况讨论。
* 2.14 求数组的子数组之和的最大值
先考虑各种可能输入，确定题意。
|---+--------------------------------------------+---------------|
| 1 | 暴力法，枚举                               | O(N^{2})      |
| 2 | 分治法，从中间分开，分成三种情况比较，递归 | O(N*log_{2}N) |
| 3 | 动态规划，从尾向头计算                     | O(N)          |
* 2.15 字数组之和的最大值（二维）
- 用部分和优化矩阵求和的过程——用已经计算出来的结果计算新结果。
- 枚举上下边，用一维情况计算左右边
* 2.16 求数组中最长递增自序列
1. 动态规划：根据前面子数组计算后面结果
2. TODO

* 2.17 数组循环移位
逆序操作
